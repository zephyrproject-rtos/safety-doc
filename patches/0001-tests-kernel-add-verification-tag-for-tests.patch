From 0216d2e9260e6e893a19b783bae58707aab8ff88 Mon Sep 17 00:00:00 2001
From: Anas Nashif <anas.nashif@intel.com>
Date: Fri, 13 Sep 2024 04:43:31 -0400
Subject: [PATCH] tests: kernel: add verification tag for tests

An example for creating traceability between tests and requirements.

Signed-off-by: Anas Nashif <anas.nashif@intel.com>
---
 .../thread_apis/src/test_threads_set_priority.c      |  1 +
 .../thread_apis/src/test_threads_suspend_resume.c    | 12 ++++++++++--
 2 files changed, 11 insertions(+), 2 deletions(-)

diff --git a/tests/kernel/threads/thread_apis/src/test_threads_set_priority.c b/tests/kernel/threads/thread_apis/src/test_threads_set_priority.c
index 1d022a3e28b..69580712959 100644
--- a/tests/kernel/threads/thread_apis/src/test_threads_set_priority.c
+++ b/tests/kernel/threads/thread_apis/src/test_threads_set_priority.c
@@ -66,6 +66,7 @@ void thread2_set_prio_test(void *p1, void *p2, void *p3)
  * higher value, and checks that the priority has been set correctly.
  *
  * @see k_thread_priority_set(), k_thread_priority_get()
+ * @verify{@req{SRS-1-2}}
  */
 ZTEST(threads_lifecycle, test_threads_priority_set)
 {
diff --git a/tests/kernel/threads/thread_apis/src/test_threads_suspend_resume.c b/tests/kernel/threads/thread_apis/src/test_threads_suspend_resume.c
index a5810bad4fd..208ae0b9a5b 100644
--- a/tests/kernel/threads/thread_apis/src/test_threads_suspend_resume.c
+++ b/tests/kernel/threads/thread_apis/src/test_threads_suspend_resume.c
@@ -47,9 +47,11 @@ static void threads_suspend_resume(int prio)
  *
  * @details Create a thread with the priority lower than the current
  * thread which is cooperative and suspend it, make sure it doesn't
- * gets scheduled, and resume and check if the entry function is executed.
+ * get scheduled, and resume and check if the entry function is executed.
  *
  * @see k_thread_suspend(), k_thread_resume()
+ * @verify{@req{SRS-1-3}}
+ * @verify{@req{SRS-1-4}}
  */
 ZTEST(threads_lifecycle_1cpu, test_threads_suspend_resume_cooperative)
 {
@@ -62,7 +64,7 @@ ZTEST(threads_lifecycle_1cpu, test_threads_suspend_resume_cooperative)
  * preemptive thread
  *
  * @details Create a thread with the priority lower than the current
- * thread which is preemptive and suspend it, make sure it doesn't gets
+ * thread which is preemptive and suspend it, make sure it doesn't get
  * scheduled, and resume and check if the entry function is executed.
  *
  * @see k_thread_suspend(), k_thread_resume()
@@ -88,6 +90,8 @@ void suspend_myself(void *arg0, void *arg1, void *arg2)
  *
  * @brief Check that suspending a thread is a schedule point when
  * called on the current thread.
+ *
+ * @verify{@req{SRS-1-3}}
  */
 ZTEST(threads_lifecycle, test_threads_suspend)
 {
@@ -125,6 +129,8 @@ void sleep_suspended(void *arg0, void *arg1, void *arg2)
  *
  * @details Suspended threads should not wake up unexpectedly if they
  * happened to have been sleeping when suspended.
+ *
+ * @verify{@req{SRS-1-3}}
  */
 ZTEST(threads_lifecycle, test_threads_suspend_timeout)
 {
@@ -153,6 +159,8 @@ ZTEST(threads_lifecycle, test_threads_suspend_timeout)
  *
  * @details Use k_thread_state_str() to get thread state.
  * Resume an unsuspend thread will not change the thread state.
+ *
+ * @verify{@req{SRS-1-4}}
  */
 ZTEST(threads_lifecycle, test_resume_unsuspend_thread)
 {
-- 
2.39.5 (Apple Git-154)

